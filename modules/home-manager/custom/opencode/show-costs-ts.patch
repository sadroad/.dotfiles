--- a/packages/opencode/src/provider/models.ts
+++ b/packages/opencode/src/provider/models.ts
@@ -23,6 +23,12 @@
         cache_read: z.number().optional(),
         cache_write: z.number().optional(),
       }),
+      actualCost: z.object({
+        input: z.number(),
+        output: z.number(),
+        cache_read: z.number().optional(),
+        cache_write: z.number().optional(),
+      }).optional(),
       limit: z.object({
         context: z.number(),
         output: z.number(),
--- a/packages/opencode/src/provider/provider.ts
+++ b/packages/opencode/src/provider/provider.ts
@@ -42,9 +42,20 @@
       const access = await AuthAnthropic.access()
       if (!access) return { autoload: false }
       for (const model of Object.values(provider.models)) {
+        // Preserve original costs before setting to 0
+        if (!model.actualCost && model.cost) {
+          model.actualCost = {
+            input: model.cost.input,
+            output: model.cost.output,
+            cache_read: model.cost.cache_read,
+            cache_write: model.cost.cache_write,
+          }
+        }
         model.cost = {
           input: 0,
           output: 0,
+          cache_read: 0,
+          cache_write: 0,
         }
       }
       return {
@@ -75,9 +86,20 @@
 
       if (provider && provider.models) {
         for (const model of Object.values(provider.models)) {
+          // Preserve original costs before setting to 0
+          if (!model.actualCost && model.cost) {
+            model.actualCost = {
+              input: model.cost.input,
+              output: model.cost.output,
+              cache_read: model.cost.cache_read,
+              cache_write: model.cost.cache_write,
+            }
+          }
           model.cost = {
             input: 0,
             output: 0,
+            cache_read: 0,
+            cache_write: 0,
           }
         }
       }
@@ -286,6 +308,13 @@
                   ...existing?.cost,
                   ...model.cost,
                 },
+          // Preserve original costs from models.dev API
+          actualCost: existing?.cost ? {
+            input: existing.cost.input,
+            output: existing.cost.output,
+            cache_read: existing.cost.cache_read,
+            cache_write: existing.cost.cache_write,
+          } : undefined,
           options: {
             ...existing?.options,
             ...model.options,
--- a/packages/opencode/src/session/index.ts
+++ b/packages/opencode/src/session/index.ts
@@ -1021,12 +1021,21 @@
         read: usage.cachedInputTokens ?? 0,
       },
     }
+    
+    // Check if this is a subscription model (cost is 0)
+    const isSubscriptionModel = model.cost.input === 0 && model.cost.output === 0
+    
+    // Use actual costs for subscription models if available, otherwise use the model's cost
+    const costs = isSubscriptionModel && model.actualCost 
+      ? model.actualCost
+      : model.cost
+    
     return {
       cost: new Decimal(0)
-        .add(new Decimal(tokens.input).mul(model.cost.input).div(1_000_000))
-        .add(new Decimal(tokens.output).mul(model.cost.output).div(1_000_000))
-        .add(new Decimal(tokens.cache.read).mul(model.cost.cache_read ?? 0).div(1_000_000))
-        .add(new Decimal(tokens.cache.write).mul(model.cost.cache_write ?? 0).div(1_000_000))
+        .add(new Decimal(tokens.input).mul(costs.input).div(1_000_000))
+        .add(new Decimal(tokens.output).mul(costs.output).div(1_000_000))
+        .add(new Decimal(tokens.cache.read).mul(costs.cache_read ?? 0).div(1_000_000))
+        .add(new Decimal(tokens.cache.write).mul(costs.cache_write ?? 0).div(1_000_000))
         .toNumber(),
       tokens,
     }
